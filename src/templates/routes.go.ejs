package main

import "encoding/json"
import "fmt"
import "net/http"
import "strconv"
import "github.com/go-chi/chi"

type Category struct {
	Id     int     `json:"id"`
	Name   *string `json:"name"`
	NameRu *string `json:"name_ru"`
	Slug   *string `json:"slug"`
}

func registerRoutes(r chi.Router) {
	categories := make(map[int]Category)
	cnt := 0
<%
endpoints.forEach(function(endpoint) {
	const path = convertPathPlaceholders(endpoint.path);
	const hasGetOne = endpoint.hasOwnProperty('get');
	const hasGetMany = endpoint.hasOwnProperty('get_list');
	if (hasGetOne || hasGetMany) {
%>
	r.Get("<%- path %>", func(w http.ResponseWriter, r *http.Request) {
<%
		if (path === '/v1/categories/count') {
-%>
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		fmt.Fprintf(w, `{"counter": %d}`, len(categories))
<%
		} else if (hasGetMany) {
-%>
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		list := []Category{categories[1]}
		json.NewEncoder(w).Encode(&list)
<%
		} else {
-%>
		id, _ := strconv.Atoi(chi.URLParam(r, "categoryId"))
		category, exist := categories[id]
		if !exist {
			w.WriteHeader(http.StatusNotFound)
			return
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		json.NewEncoder(w).Encode(&category)
<%
		}
%>
	})
<%
	}
	if (endpoint.hasOwnProperty('post')) {
%>
	r.Post("<%- path %>", func(w http.ResponseWriter, r *http.Request) {
		var category Category
		json.NewDecoder(r.Body).Decode(&category)
		cnt += 1
		category.Id = cnt
		categories[cnt] = category
		w.WriteHeader(http.StatusNoContent)
	})
<%
	}
	if (endpoint.hasOwnProperty('put')) {
%>
	r.Put("<%- path %>", func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(chi.URLParam(r, "categoryId"))
		var category Category
		json.NewDecoder(r.Body).Decode(&category)
		categories[id] = category
		w.WriteHeader(http.StatusNoContent)
	})
<%
	}
	if (endpoint.hasOwnProperty('delete')) {
%>
	r.Delete("<%- path %>", func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(chi.URLParam(r, "categoryId"))
		delete(categories, id)
		w.WriteHeader(http.StatusNoContent)
	})
<%
	}
})
%>
}
