import os
import psycopg2
import psycopg2.extras

from fastapi import APIRouter, HTTPException

router = APIRouter()

<%
// { "get", "/v1/categories/:categoryId" } => "get_v1_categories_category_id"
function generate_method_name(method, path) {
    const name = camel2snakeCase(path).replace(/\//g, '_').replace(/[^_a-z0-9]/g, '');
    return `${method}${name}`
}

// "INSERT INTO ... VALUES(:categoryId)" => "INSERT INTO ... VALUES(%(categoryId)s)"
// See: https://www.psycopg.org/docs/usage.html#passing-parameters-to-sql-queries
function convertToPsycopgNamedArguments(sql) {
    return sql.replace(/:([_a-zA-Z]+)/g, '%($1)s')
}

// "/categories/:categoryId" => "/categories/{categoryId}"
function convertToFastApiPath(path) {
    return path.replace(/:([_a-zA-Z]+)/g, '{$1}')
}


endpoints.forEach(function(endpoint) {
    const path = convertToFastApiPath(endpoint.path)
    const paramsFromPath = extractParamsFromPath(endpoint.path)

    endpoint.methods.forEach(function(method) {
        const hasGetOne = method.name === 'get'
        const hasGetMany = method.name === 'get_list'
        const pythonMethodName = generate_method_name(method.name, path)
        const sql = convertToPsycopgNamedArguments(formatQuery(method.query))
        const params = extractParamsFromQuery(method.query);
        const formattedParams = params.length > 0
            // [ "p.categoryId" ] => [ '"categoryId": categoryId' ]
            ? ', { ' + params.map(param => param.substring(2)).map(param => `"${param}": ${param}`).join(', ') + ' }'
            : ''

        if (hasGetOne || hasGetMany) {
%>
@router.get('<%- path %>')
def <%- pythonMethodName %>(<%- paramsFromPath.join(', ') %>):
<%          if (hasGetOne) { -%>
    conn = psycopg2.connect(
        database = os.getenv('DB_NAME'),
        user = os.getenv('DB_USER'),
        password = os.getenv('DB_PASSWORD'),
        host = os.getenv('DB_HOST', 'localhost'),
        port = 5432)
    try:
        with conn:
            with conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor) as cur:
                cur.execute('<%- sql %>'<%- formattedParams %>)
                result = cur.fetchone()
                if result is None:
                    raise HTTPException(status_code=404)
                return result
    finally:
        conn.close()
<%
            } else {
-%>
    pass
<%
            }
        }
        if (method.name === 'post') {
%>
@router.post('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
        if (method.name === 'put') {
%>
@router.put('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
        if (method.name === 'delete') {
%>
@router.delete('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
    })
})
%>
