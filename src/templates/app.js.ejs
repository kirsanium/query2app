const bodyParser = require('body-parser')
const express = require('express')
const mysql = require('mysql')

const app = express()
app.set('x-powered-by', false)
app.use(bodyParser.json())

const pool = mysql.createPool({
    connectionLimit: 2,
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    // Support of named placeholders (https://github.com/mysqljs/mysql#custom-format)
    queryFormat: function(query, values) {
        if (!values) {
            return query;
        }
        return query.replace(/\:(\w+)/g, function(txt, key) {
            if (values.hasOwnProperty(key)) {
                return this.escape(values[key]);
            }
            return txt;
        }.bind(this));
    }
})

<%
endpoints.forEach(function(endpoint) {
    if (endpoint.hasOwnProperty('get')) {
        const params = extractParams(endpoint.get);
%>
app.get('<%- endpoint.path %>', (req, res) => {
    pool.query(
        <%- formatQuery(endpoint.get) %>,<%- params.length > 0 ? '\n        ' + formatParams(params, 'req.params') + ',' : '' %>
        (err, rows, fields) => {
            if (err) {
                throw err
            }
            res.json(rows[0])
        }
    )
})
<%
    }
    if (endpoint.hasOwnProperty('post')) {
        const params = extractParams(endpoint.post);
%>
app.post('<%- endpoint.path %>', (req, res) => {
    pool.query(
        <%- formatQuery(endpoint.post) %>,<%- params.length > 0 ? '\n        ' + formatParams(params, 'req.body') + ',' : '' %>
        (err, rows, fields) => {
            if (err) {
                throw err
            }
            res.sendStatus(204)
        }
    )
})
<%
    }
    if (endpoint.hasOwnProperty('put')) {
        const params = extractParams(endpoint.put);
%>
app.put('<%- endpoint.path %>', (req, res) => {
    pool.query(
        <%- formatQuery(endpoint.put) %>,<%- params.length > 0 ? '\n        ' + formatParams(params, 'req.body') + ',' : '' %>
        (err, rows, fields) => {
            if (err) {
                throw err
            }
            res.sendStatus(204)
        }
    )
})
<%
    }
    if (endpoint.hasOwnProperty('delete')) {
        const params = extractParams(endpoint.delete);
%>
app.delete('<%- endpoint.path %>', (req, res) => {
    pool.query(
        <%- formatQuery(endpoint.delete) %>,<%- params.length > 0 ? '\n        ' + formatParams(params, 'req.params') + ',' : '' %>
        (err, rows, fields) => {
            if (err) {
                throw err
            }
            res.sendStatus(204)
        }
    )
})
<%
    }
});
-%>

const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log(`Listen on ${port}`)
})
